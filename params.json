{"name":"A2Z CMS","tagline":"A2ZCMS","body":"# A2ZCMS\r\n![logo](http://i44.tinypic.com/jgm6ht.jpg)\r\n\r\n======\r\n<!-- DONATE/ -->\r\n[![Gittip donate button](http://img.shields.io/gittip/mrakodol.png)](https://www.gittip.com/mrakodol/ \"Donate weekly to this project using Gittip\")\r\n[![Flattr donate button](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=mrakodol&url=https%3A%2F%2Fgithub.com%2Fmrakodol%2FA2ZCMS)\r\n[![BitCoin donate button](http://img.shields.io/bitcoin/donate.png?color=yellow)](https://coinbase.com/checkouts/4d0769619eaebde35c378920a895596e \"Donate once-off to this project using BitCoin\")\r\n<!-- /DONATE -->\r\n======\r\n## A2Z CMS based on Laravel 4.1\r\n* [A2Z CMS Features](#feature1)\r\n* [Requirements](#feature2)\r\n* [How to install](#feature3)\r\n* [Application Structure](#feature4)\r\n* [Production Launch](#feature5)\r\n* [Troubleshooting](#feature6)\r\n* [Included Package Information](#feature7)\r\n* [License](#feature8)\r\n* [Additional information](#feature9)\r\n* [How CMS is look like](#feature10)\r\n\r\n<a name=\"feature1\"></a>\r\n## A2Z CMS Features:\r\n* Laravel 4.1\r\n* Twitter Bootstrap 3.0.0\r\n* Custom Error Pages\r\n\t* 403 for forbidden page accesses\r\n\t* 404 for not found pages\r\n\t* 500 for internal server errors\r\n* [Confide](#confide) for Authentication and Authorization\r\n* Back-end\r\n\t* Automatic install and settup website.\r\n\t* User and Role management.\r\n\t* View user login history.\r\n\t* Manage blog posts and comments.\r\n\t* Manage gallery pictures and comments.\r\n\t* Manage custom forms.\r\n\t* Manage pages aranged into cateogry and possition.\r\n\t* Manage to-do list.\r\n    * DataTables dynamic table sorting and filtering.\r\n    * Colorbox Lightbox jQuery modal popup.\r\n    * Add Summernote WYSIWYG in textareas.\r\n    * soon will be more...\r\n* Front-end\r\n\t* User login, registration, forgot password\r\n\t* Blog,Gallery,Messages and more functionality\r\n\t* Voting content(Blog,Gallery,Page)\r\n\t* Custom themes\r\n\t* User can use avatar\r\n\t* Add Summernote WYSIWYG in textareas\r\n\t* soon will be more...\r\n* Packages included:\r\n\t* [Confide](#confide)\r\n\t* [Entrust](#entrust)\r\n\t* [Ardent](#ardent)\r\n\t* [Carbon](#carbon)\r\n\t* [Presenter](#presenter)\r\n\t* [JeffreyWay Laravel 4 Generators](#generators)\r\n\t* [Summernote](#summernote)\r\n\r\n-----\r\n<a name=\"feature2\"></a>\r\n##Requirements\r\n\r\n\tPHP >= 5.4.0 (Entrust requires 5.4, this is an increase over Laravel's 5.3.7 requirement)\r\n\tMCrypt PHP Extension\r\n\tEnable creating triger in database\r\n\tSQL server(for example MySQL)\r\n\r\n-----\r\n<a name=\"feature3\"></a>\r\n##How to install:\r\n* [Step 1: Get the code](#step1)\r\n* [Step 2: Use Composer to install dependencies](#step2)\r\n* [Step 3: Configure Environments(optional)](#step3)\r\n* [Step 4: Configure Mailer](#step4)\r\n* [Step 5: Create database and create Encryption Key](#step5)\r\n* [Step 6: Install CMS](#step6)\r\n* [Step 7: Make sure app/storage is writable by your web server](#step7)\r\n* [Step 8: Start Page](#step8)\r\n\r\n-----\r\n<a name=\"step1\"></a>\r\n### Step 1: Get the code\r\n#### Option 1: Git Clone\r\n\r\n\tgit clone git://github.com/mrakodol/A2ZCMS.git a2zcms\r\n\r\n#### Option 2: Download the repository\r\n\r\n    https://github.com/mrakodol/A2ZCMS/archive/master.zip\r\n\r\n-----\r\n<a name=\"step2\"></a>\r\n### Step 2: Use Composer to install dependencies\r\n\r\nLaravel utilizes [Composer](http://getcomposer.org/) to manage its dependencies. First, download a copy of the composer.phar. \r\nOnce you have the PHAR archive, you can either keep it in your local project directory or move to \r\nusr/local/bin to use it globally on your system. On Windows, you can use the Composer [Windows installer](https://getcomposer.org/Composer-Setup.exe).\r\n\r\n#### Option 1: Composer is not installed globally\r\n\r\n    cd a2zcms\r\n\tcurl -s http://getcomposer.org/installer | php\r\n\tphp composer.phar install --dev\r\n#### Option 2: Composer is installed globally\r\n\r\n    cd a2zcms\r\n\tcomposer install --dev\r\n\r\nPlease note the use of the `--dev` flag.\r\n\r\nSome packages used to preprocess and minify assests are required on the development environment.\r\n\r\nWhen you deploy your project on a production environment you will want to upload the ***composer.lock*** file used on the development environment and only run `php composer.phar install` on the production server.\r\n\r\nThis will skip the development packages and ensure the version of the packages installed on the production server match those you developped on.\r\n\r\nNEVER RUN `php composer.phar update` ON YOUR PRODUCTION SERVER.\r\n\r\nIf you haven't already, you might want to make composer be installed globally:\r\n\r\n    $ curl -s http://getcomposer.org/installer | php\r\n    $ sudo mv composer.phar /usr/local/bin/composer\r\n\r\nNow I can use composer by invoking just the composer command.\r\n\r\nOptional way to do it, is to set up an alias:\r\n    alias composer='/location/of/the/composer.phar'\r\n\r\n-----\r\n<a name=\"step3\"></a>\r\n### Step 3: Configure Environments(optional)\r\n\r\nLaravel 4 will load configuration files depending on your environment. Basset will also build collections depending on this environment setting.\r\n\r\nOpen ***bootstrap/start.php*** and edit the following lines to match your settings. You want to be using your machine name in Windows and your hostname in OS X and Linux (type `hostname` in terminal). Using the machine name will allow the `php artisan` command to use the right configuration files as well.\r\n\r\n    $env = $app->detectEnvironment(array(\r\n\r\n        'local' => array('your-local-machine-name'),\r\n        'staging' => array('your-staging-machine-name'),\r\n        'production' => array('your-production-machine-name'),\r\n\r\n    ));    \r\n-----\r\n<a name=\"step4\"></a>\r\n### Step 4: Configure Mailer\r\n\r\nIn the same fashion, copy the ***app/config/mail.php*** configuration file in ***app/config/local/mail.php***. Now set the `address` and `name` from the `from` array in ***config/mail.php***. Those will be used to send account confirmation and password reset emails to the users.\r\nIf you don't set that registration will fail because it cannot send the confirmation email.\r\n\r\n-----\r\n<a name=\"step5\"></a>\r\n### Step 5: Create database and create Encryption Key\r\n\r\nIf you finished first four steps, now you can create database on your database server(MySQL). You must create database\r\nwith utf-8 collation(uft8_general_ci), to install and application work perfectly.\r\n\r\nThe configuration option that we need is create the encryption key that is used within the framework. \r\nTo do this, all we need to do is to run:\r\n\r\n    php artisan key:generate\r\n\r\n-----\r\n<a name=\"step6\"></a>\r\n### Step 6: Install CMS\r\n\r\nNow that you have the environment configured, you need to create a database configuration for it. \r\nIf you install A2ZCMS on your localhost in folder a2zcms, you can type on web browser: \r\n\thttp://localhost/a2zcms/\r\nAnd than finish the installation. Instalation would populate a database with tables and start-up data(you can delete that data later).\r\n\r\nNow inside ***app/config*** that corresponds to the environment the code is deployed in. This will most likely be ***local***  or ***production***  when you first start a project.\r\n\r\nYou may setup your timezone:\r\n\r\n    <?php\r\n\t\t/*\r\n\t\t|--------------------------------------------------------------------------\r\n\t\t| Application Timezone\r\n\t\t|--------------------------------------------------------------------------\r\n\t\t|\r\n\t\t| Here you may specify the default timezone for your application, which\r\n\t\t| will be used by the PHP date and date-time functions. We have gone\r\n\t\t| ahead and set this to a sensible default for you out of the box.\r\n\t\t|\r\n\t\t*/\r\n\t\r\n\t\t'timezone' => 'UTC',\r\n    );\r\n\r\n-----\r\n<a name=\"step7\"></a>\r\n### Step 7: Make sure app/storage is writable by your web server.\r\n\r\nIf permissions are set correctly:\r\n\r\n    chmod -R 775 app/storage\r\n\r\nShould work, if not try\r\n\r\n    chmod -R 777 app/storage\r\n\r\n-----\r\n<a name=\"step8\"></a>\r\n### Step 8: Start Page\r\n\r\n####Admin login\r\nYou can login to admin part of A2ZCMS:\r\n\r\n    username: username_from_install_proces\r\n    password: password_from_install_proces\r\n\r\n\r\n-----\r\n<a name=\"feature4\"></a>\r\n## Application Structure\r\n\r\nThe structure of this starter site is the same as default Laravel 4 with one exception.\r\nThis starter site adds a `library` folder. Which, houses application specific library files.\r\nThe files within library could also be handled within a composer package, but is included here as an example.\r\n\r\nControllers for Admin part located in admin folder in Controller folder in app folder. \r\nCMS have a custom make a page using custom function for main content and sidebar.\r\nImplementation custom function for pages is located in BaseController and shows in all pages. \r\nWhen user go to some non-custom page(edit profile, messages,...) user get sidebar from first page.\r\n\r\n-----\r\n<a name=\"feature5\"></a>\r\n### Production Launch\r\n\r\nBy default debugging is enabled. Before you go to production you should disable debugging in `app/config/app.php`\r\n\r\n```\r\n    /*\r\n    |--------------------------------------------------------------------------\r\n    | Application Debug Mode\r\n    |--------------------------------------------------------------------------\r\n    |\r\n    | When your application is in debug mode, detailed error messages with\r\n    | stack traces will be shown on every error that occurs within your\r\n    | application. If disabled, a simple generic error page is shown.\r\n    |\r\n    */\r\n\r\n    'debug' => false,\r\n```\r\n\r\n-----\r\n<a name=\"feature6\"></a>\r\n## Troubleshooting\r\n\r\n### Site loading very slow\r\n\r\n\t\tcomposer dump-autoload --optimize\r\n\r\n### If A2Z CMS did not want to get dependesy\r\n\r\nFor some Windows people they have had to manually adjust the path in composer because composer is looking in \r\nITS root folder (C:\\ProgramData\\Composer\\Bin....etc...) for artisan instead of the root folder you are \r\ncurrently working from.\r\nIn your composer.json change the lines to reflect the full path to artisan and remember to escape the slash.\r\nFor example, assuming a Windows PC with XAMPP installed on D disk :\r\n\r\n\t\t\"pre-update-cmd\": [\r\n\t\t\t\"php d:\\\\xampp\\\\htdocs\\\\website\\\\artisan clear-compiled\"\r\n\t\t],\r\n\t\t\"post-install-cmd\": [\r\n\t\t\t\"php d:\\\\xampp\\\\htdocs\\\\website\\\\artisan optimize\"\r\n\t\t],\r\n\t\t\"post-update-cmd\": [\r\n\t\t\t\"php d:\\\\xampp\\\\htdocs\\\\website\\\\artisan optimize\"\r\n\t\t]\r\n\r\nNote : This will change your composer.json to only work on your current PC (or any with a similar path). \r\nIf you use github or something to work on another system, this will need to be changed to reflect the new \r\nenvironment.\r\n\r\n\r\n-----\r\n<a name=\"feature7\"></a>\r\n## Included Package Information\r\n<a name=\"confide\"></a>\r\n## Confide Authentication Solution\r\n\r\nUsed for the user auth and registration. In general for user controllers you'll want to use something like the following:\r\n\r\n    <?php\r\n\r\n    use Zizaco\\Confide\\ConfideUser;\r\n\r\n    class User extends ConfideUser {\r\n\r\n    }\r\n\r\nFor full usage see [Zizaco/Confide Documentation](https://github.com/zizaco/confide)\r\n\r\n<a name=\"entrust\"></a>\r\n## Entrust Role Solution\r\n\r\nEntrust provides a flexible way to add Role-based Permissions to Laravel4.\r\n\r\n    <?php\r\n\r\n    use Zizaco\\Entrust\\EntrustRole;\r\n\r\n    class Role extends EntrustRole\r\n    {\r\n\r\n    }\r\n\r\nFor full usage see [Zizaco/Entrust Documentation](https://github.com/zizaco/entrust)\r\n\r\n<a name=\"ardent\"></a>\r\n## Ardent - Used for handling repetitive validation tasks.\r\n\r\nSelf-validating, secure and smart models for Laravel 4's Eloquent ORM\r\n\r\nFor full usage see [Ardent Documentation](https://github.com/laravelbook/ardent)\r\n\r\n<a name=\"carbon\"></a>\r\n## Carbon\r\n\r\nA fluent extension to PHPs DateTime class.\r\n\r\n```php\r\n<?php\r\nprintf(\"Right now is %s\", Carbon::now()->toDateTimeString());\r\nprintf(\"Right now in Vancouver is %s\", Carbon::now('America/Vancouver'));  //implicit __toString()\r\n$tomorrow = Carbon::now()->addDay();\r\n$lastWeek = Carbon::now()->subWeek();\r\n$nextSummerOlympics = Carbon::createFromDate(2012)->addYears(4);\r\n\r\n$officialDate = Carbon::now()->toRFC2822String();\r\n\r\n$howOldAmI = Carbon::createFromDate(1975, 5, 21)->age;\r\n\r\n$noonTodayLondonTime = Carbon::createFromTime(12, 0, 0, 'Europe/London');\r\n\r\n$worldWillEnd = Carbon::createFromDate(2012, 12, 21, 'GMT');\r\n```\r\n\r\nFor full usage see [Carbon](https://github.com/briannesbitt/Carbon)\r\n\r\n<a name=\"presenter\"></a>\r\n## Presenter\r\n\r\nSimple presenter to wrap and render objects. Think of it of a way to modify an asset for the view layer only.\r\nControl the presentation in the presentation layer not in the model.\r\n\r\nThe core idea is the relationship between two classes: your model full of data and a presenter which works as a sort of wrapper to help with your views.\r\nFor instance, if you have a `User` object you might have a `UserPresenter` presenter to go with it. To use it all you do is `$userObject = new UserPresenter($userObject);`.\r\nThe `$userObject` will function the same unless a method is called that is a member of the `UserPresenter`. Another way to think of it is that any call that doesn't exist in the `UserPresenter` falls through to the original object.\r\n\r\nFor full usage see [Presenter Readme](https://github.com/robclancy/presenter)\r\n\r\n<a name=\"generators\"></a>\r\n## Laravel 4 Generators\r\n\r\nLaravel 4 Generators package provides a variety of generators to speed up your development process. These generators include:\r\n\r\n- `generate:model`\r\n- `generate:seed`\r\n- `generate:test`\r\n- `generate:view`\r\n- `generate:migration`\r\n- `generate:resource`\r\n- `generate:scaffold`\r\n- `generate:form`\r\n- `generate:test`\r\n- `generate:pivot <-- NEW!!`\r\n\r\nFor full usage see [Laravel 4 Generators Readme](https://github.com/JeffreyWay/Laravel-4-Generators/blob/master/readme.md)\r\n\r\n<a name\"summernote\"></a>\r\n## Summernote\r\n\r\nSummernote is a javascript program that helps you to create WYSIWYG Editor on web. Super Simple WYSIWYG Editor on Bootstrap(3.0 and 2.x).\r\n\r\n[Demo Page](http://hackerwins.github.io/summernote/)\r\n\r\nFor full usage see [Summernote Readme](https://github.com/hackerwins/summernote)\r\n\r\n\r\n\r\n-----\r\n<a name=\"feature8\"></a>\r\n## License\r\n\r\nThis is free software distributed under the terms of the MIT license\r\n\r\n-----\r\n<a name=\"feature9\"></a>\r\n## Additional information\r\n\r\nInspired by and based on [andrew13's Laravel-4-Bootstrap-Starter-Site](https://github.com/andrew13/Laravel-4-Bootstrap-Starter-Site)\r\n\r\n<a name=\"feature10\"></a>\r\n##How CMS is look like\r\n\r\n![Install](http://oi41.tinypic.com/2my907n.jpg)\r\n![First page](http://oi39.tinypic.com/15661qw.jpg)\r\n![Messages](http://oi39.tinypic.com/2ajdwl2.jpg)\r\n![Admin dashboard](http://oi44.tinypic.com/2870ry0.jpg)\r\n![Admin page](http://oi44.tinypic.com/eu2ffc.jpg)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}